/*   
     ----------------------------------------------------------------
	 Code generated by CRA.ModelLayer.ACC - API Code Generator
     http://components.biomamodelling.org/components/acc/help/ 

     Loic Manceau
     loic.manceau@inra.fr
     INRA
     3/29/2018 5:59:40 PM
	 ----------------------------------------------------------------
*/

using System;
using System.Collections.Generic;
using System.Text;
using CRA.AgroManagement;
using CRA.ModelLayer.Core;

namespace SiriusQualityPhenology
{
    /// <summary>
    /// SiriusQualityPhenology component API 
    /// </summary>
    public class SiriusQualityPhenologyAPI 
    {
        private string _resultPreConditions;
        private string _resultPostConditions;
        Preconditions p = new Preconditions();

        /// <summary>
        /// Calculate method for the component
        /// </summary>
        /// <param name=p>PhenologyState Domain class contains the accessors to values</param>
        /// <param name=p1>PhenologyState Domain class contains the accessors to values</param>
        /// <param name=ae>AgroManagement objects of impact parameters</param>
        public void Estimate
		(IStrategySiriusQualityPhenology st, PhenologyState p, PhenologyState p1, ActEvents ae)
        {
            st.Estimate
			( p, p1, ae);
        }
              
        /// <summary>
        /// Calculate method for the component with test of preconditions
        /// </summary>
        /// <param name=p>PhenologyState Domain class contains the accessors to values</param>
        /// <param name=p1>PhenologyState Domain class contains the accessors to values</param>
        /// <param name=ae>AgroManagement objects of impact parameters</param>
        /// <param name="saveLog">Save log via a writer or show on screen</param>
        /// <param name="callID">Context description for violations</param>
        public void Estimate
            (IStrategySiriusQualityPhenology st, PhenologyState s, PhenologyState s1, ActEvents ae, bool saveLog, string callID)        
           {
            _resultPreConditions = String.Empty;
            _resultPostConditions = String.Empty;
            _resultPreConditions = st.TestPreConditions(s, s1, callID);
            st.Estimate(s, s1, ae);
            _resultPostConditions = st.TestPostConditions(s, s1, callID);

            if (_resultPreConditions != String.Empty || _resultPostConditions != String.Empty)
            {
                p.TestsOut(_resultPreConditions + _resultPostConditions, saveLog, callID);
            }
        }

        /// <summary>
        /// Show the about form with access to the help and codedoc
        /// </summary>
        public void Info()
        {
            // The following assumes an about form called AboutBox
            //AboutBox a = new AboutBox();
            //a.ShowDialog();
        }
    }
}
 
